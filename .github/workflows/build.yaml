name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main


jobs:
  build:
    runs-on: ubuntu-latest  # Chạy trên môi trường Ubuntu của GitHub Actions

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3  # Lấy mã nguồn từ repository

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  # Cấu hình Docker Buildx

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME  }}  # Docker Hub username từ GitHub Secrets
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN  }}  # Docker Hub password từ GitHub Secrets
        
      - name: Cache Docker Image Layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and Push Docker WebAPI
        uses: docker/build-push-action@v2
        id: docker_build1
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/api
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          
      - name: Build and Push Docker NGINX
        uses: docker/build-push-action@v2
        id: docker_build2
        with:
          context: ./
          file: ./Dockerfile.nginx
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/nginx
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache 

      - name: Build and Push Docker PgAdmin
        uses: docker/build-push-action@v2
        id: docker_build3
        with:
          context: ./
          file: ./Dockerfile.pgadmin
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/pgadmin
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache 

      - name: Build and Push Docker Postgres
        uses: docker/build-push-action@v2
        id: docker_build4
        with:
          context: ./
          file: ./Dockerfile.postgres
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/postgres
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache 
  
      - name: Build and Push Docker Frontend
        uses: docker/build-push-action@v2
        id: docker_build5
        with:
          context: ./
          file: ./Dockerfile.frontend
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/frontend
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache 
          
      - name: Verify
        run: echo ${{ steps.docker_build.outputs.digest }}
      

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    - name: Install dependencies
      run: |
        cd frontend
        npm install

    - name: Run tests
      run: |
        cd frontend
        npx jest --config jest.config.cjs

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure deployment happens after the build job

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Deploy Docker WebAPI
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/api:latest
          docker run -d -p 80:80 ${{ secrets.DOCKERHUB_USERNAME }}/api:latest

      - name: Deploy Docker NGINX
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/nginx:latest
          docker run -d -p 8080:80 ${{ secrets.DOCKERHUB_USERNAME }}/nginx:latest

      - name: Deploy Docker PgAdmin
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/pgadmin:latest
          docker run -d -p 5050:80 ${{ secrets.DOCKERHUB_USERNAME }}/pgadmin:latest

      - name: Deploy Docker Postgres
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/postgres:latest
          docker run -d -p 5432:5432 ${{ secrets.DOCKERHUB_USERNAME }}/postgres:latest

      - name: Deploy Docker Frontend
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
          docker run -d -p 3000:80 ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
